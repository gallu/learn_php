<?php

// PHPは「グローバルスコープ」と「ローカルスコープ」を持ちます
$g_i = 1; // グローバルスコープ
function func()
{
    $l_i = 10; // ローカルスコープ
}

// グローバルスコープ内では「グローバルスコープの変数」のみ、関数(とクラスメソッド)内では「自分の関数で定義したローカルスコープの変数」のみが扱えます。
$g_i = 1; // グローバルスコープ
function func_1()
{
    $l_i = 10; // ローカルスコープ
    //var_dump($g_i); // グローバルスコープの変数なので扱えない
    var_dump($l_i);

    // 以下のようにすればグローバルスコープを扱えるが、推奨されない事が多い
    var_dump($GLOBALS['g_i']); // 原則推奨されないが、「やむを得ずグローバル変数を見るより他に手段がない」場合、globalキーワード(下記)よりはマシである、と言われることがある
    // 以下のようにすればグローバルスコープを扱えるが、推奨されない事が多い その2
    global $g_i;
    var_dump($g_i); // グローバルスコープの変数だが、 global キーワード で定義をしたので扱える。特に推奨されない事が多い
}
func_1();
var_dump($g_i);
//var_dump($l_i); // ローカルスコープの変数なので扱えない
echo "\n";

// 同じローカルスコープでも「他の関数で定義した変数」は扱えない
function func_2()
{
    $l_i_2 = 10; // ローカルスコープ
}
function func_3()
{
    //var_dump($l_i_2); // func_2() の変数なので、ここでは使えない
}
func_3();
echo "\n";

// 「同じ関数」でも、callされる毎にそれは「違うローカルスコープ」として扱われる
function func_4($c)
{
    echo __FUNCTION__, ": count down {$c}\n";
    var_dump($a); // 未定義の変数なので Notice(毎回)
    $a = 10; // ここで定義している(が、新たに func_4() を呼ぶと「別のローカルスコープになる」ので、結局使われる事はない)
    if (0 !== $c) {
        $c --;
        func_4($c);
    }
}
func_4(1);
echo "\n";

// 関数内の変数は「呼ばれる毎」に、生成と破棄が繰り返される
function func_5()
{
    $c = 0; // ここで$cが作られる
    $c ++;
    echo __FUNCTION__, ": {$c}\n";
} // 関数の処理から抜けた時点で$cは破棄される
func_5();
func_5();
func_5();
echo "\n";

// 「静的変数」を使うと、関数内の変数が「破棄されずに値を保持し続ける(プログラム終了時まで)」
function func_6()
{
    static $c = 0; // 初回は、ここで$cが作られる。2回目以降はこの行は無視される
    $c ++;
    echo __FUNCTION__, ": {$c}\n";
} // 関数の処理から抜けた時点で$cは破棄、されない(staticだから)
func_6();
func_6();
func_6();

